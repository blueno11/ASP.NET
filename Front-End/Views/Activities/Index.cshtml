@{
    ViewData["Title"] = "Tất cả hoạt động";
}
<div class="container-fluid">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2 class="page-title">Tất cả hoạt động</h2>
        <div class="d-flex gap-2">
            <input type="text" class="form-control" id="searchInput" placeholder="Tìm kiếm mô tả..." style="width: 250px;">
            <select class="form-select" id="typeFilter" style="width: 200px;">
                <option value="">Tất cả loại</option>
                <option value="Đơn hàng mới">Đơn hàng mới</option>
                <option value="Khách hàng mới">Khách hàng mới</option>
                <option value="Nhập kho mới">Nhập kho mới</option>
                <option value="Yêu cầu bảo trì">Yêu cầu bảo trì</option>
                <option value="Yêu cầu đổi trả">Yêu cầu đổi trả</option>
            </select>
        </div>
    </div>
    <div class="card">
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-hover" id="activitiesTable">
                    <thead>
                        <tr>
                            <th>Loại</th>
                            <th>Mô tả</th>
                            <th>Thời gian</th>
                        </tr>
                    </thead>
                    <tbody>
                        <!-- Dữ liệu sẽ được render bằng JS -->
                    </tbody>
                </table>
                <nav>
                    <ul class="pagination justify-content-center" id="pagination"></ul>
                </nav>
            </div>
        </div>
    </div>
</div>
@section Scripts {
    <script>
        const API_BASE_URL = 'https://localhost:7156';
        let allActivities = [];
        let filteredActivities = [];
        const pageSize = 10;
        let currentPage = 1;

        async function loadAllActivities() {
            try {
                // Lấy nhiều hơn 5 hoạt động, ví dụ 100
                const response = await fetch(`${API_BASE_URL}/api/activities/recent?top=100`);
                if (!response.ok) throw new Error('Lỗi khi tải hoạt động');
                allActivities = await response.json();
                filteredActivities = allActivities;
                renderActivities();
                renderPagination();
            } catch (error) {
                alert(error.message);
            }
        }

        function renderActivities() {
            const tbody = document.querySelector('#activitiesTable tbody');
            tbody.innerHTML = '';
            const start = (currentPage - 1) * pageSize;
            const end = start + pageSize;
            const pageData = filteredActivities.slice(start, end);
            if (pageData.length === 0) {
                tbody.innerHTML = '<tr><td colspan="3" class="text-center">Không có hoạt động nào</td></tr>';
                return;
            }
            pageData.forEach(act => {
                const tr = document.createElement('tr');
                tr.innerHTML = `
                    <td>${act.type}</td>
                    <td>${act.description}</td>
                    <td>${formatDateTime(act.time)}</td>
                `;
                tbody.appendChild(tr);
            });
        }

        function renderPagination() {
            const totalPages = Math.ceil(filteredActivities.length / pageSize);
            const pagination = document.getElementById('pagination');
            pagination.innerHTML = '';
            if (totalPages <= 1) return;
            for (let i = 1; i <= totalPages; i++) {
                const li = document.createElement('li');
                li.className = 'page-item' + (i === currentPage ? ' active' : '');
                li.innerHTML = `<a class="page-link" href="#">${i}</a>`;
                li.addEventListener('click', function(e) {
                    e.preventDefault();
                    currentPage = i;
                    renderActivities();
                    renderPagination();
                });
                pagination.appendChild(li);
            }
        }

        function formatDateTime(dateString) {
            const date = new Date(dateString);
            return date.toLocaleDateString('vi-VN', {
                year: 'numeric', month: '2-digit', day: '2-digit'
            });
        }

        // Filter
        document.getElementById('typeFilter').addEventListener('change', function() {
            applyFilter();
        });
        document.getElementById('searchInput').addEventListener('input', function() {
            applyFilter();
        });
        function applyFilter() {
            const type = document.getElementById('typeFilter').value;
            const search = document.getElementById('searchInput').value.toLowerCase();
            filteredActivities = allActivities.filter(act => {
                const matchType = !type || act.type === type;
                const matchDesc = !search || act.description.toLowerCase().includes(search);
                return matchType && matchDesc;
            });
            currentPage = 1;
            renderActivities();
            renderPagination();
        }

        document.addEventListener('DOMContentLoaded', loadAllActivities);
    </script>
} 